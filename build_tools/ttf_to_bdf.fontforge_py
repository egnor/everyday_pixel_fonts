#!/usr/bin/env -S fontforge -lang=py -script
"""Converts .ttf files (distribution format) to .bdf (X11 bitmap format)
This script runs in fontforge's embedded Python interpreter."""

import fontforge
import re
import subprocess
import sys
from pathlib import Path

top_dir = Path(__file__).parent.parent
try: top_dir = top_dir.relative_to(Path.cwd())
except ValueError: pass

ttf_dir = top_dir / "original_ttfs"
ttf_paths = list(sorted(ttf_dir.glob("**/*.ttf")))
if not ttf_paths: raise SystemExit(f"💥 Missing: {ttf_dir}/**/*.ttf")

bdf_dir = top_dir / "produced_bdfs"
bdf_dir.mkdir(exist_ok=True)

print(f"🗑️ Cleaning: {bdf_dir}/*.bdf")
[old_path.unlink() for old_path in bdf_dir.glob("*.bdf")]

for ttf_path in ttf_paths:
    print(f"\n🔠 Converting: {ttf_path}")
    ttf_font = fontforge.open(str(ttf_path))

    pixel_size = ttf_font.em // 128
    print(f"↕️ Generating bitmap: size={ttf_font.em} => pixels={pixel_size}")
    ttf_font.selection.all()
    ttf_font.bitmapSizes = ((pixel_size,),)
    ttf_font.regenBitmaps(ttf_font.bitmapSizes)

    font_name = re.sub(r"_original$", "-v0", ttf_path.stem.lower())
    if not re.search(r"-v\d+", font_name):
        font_name += "-v1"

    bdf_path = bdf_dir / (font_name + ".bdf")
    print(f"👾 Saving bitmap: {bdf_path}")
    ttf_font.generate(str(bdf_path))
    ttf_font.close()

print(f"\n🏁 Updated {len(ttf_paths)} .bdf font files")
