#!/usr/bin/env python3
"""Builds 'bdfconv' from u8g2 source tree and converts .bdf files
(X11 bitmap format) to u8g2-format source files."""

import argparse
import json
import logging
import ok_logging_setup
import ok_subprocess_defaults
import re
import textwrap
from pathlib import Path

ok_logging_setup.install()

top_dir = Path(__file__).parent.parent
try: top_dir = top_dir.relative_to(Path.cwd())
except ValueError: pass

parser = argparse.ArgumentParser()
parser.add_argument("--u8g2_repo", type=Path, default=top_dir / ".." / "u8g2")
args = parser.parse_args()
subproc = ok_subprocess_defaults.SubprocessDefaults()

#
# build bdfconv
#

bdfconv_dir = args.u8g2_repo / "tools" / "font" / "bdfconv"
bdfconv_sources = list(sorted(bdfconv_dir.glob("*.c")))
if not bdfconv_sources: ok_logging_setup.exit(f"No *.c: {bdfconv_dir}")
print(bdfconv_sources)

build_dir = top_dir / "build.tmp"
build_dir.mkdir(exist_ok=True)

bdfconv = build_dir / "bdfconv"
logging.info(f"\nüèóÔ∏è Building: {bdfconv}")
subproc.run("gcc", "-O4", f"-I{bdfconv_dir}", *bdfconv_sources, "-o", bdfconv)

#
# convert fonts
#

bdf_dir = top_dir / "derived_bdfs"
bdf_paths = list(sorted(bdf_dir.glob("*.bdf")))
if not bdf_paths: ok_logging_setup.exit(f"No *.bdf: {bdf_dir}")

out_source_dir = top_dir / "src"
logging.info(f"üóëÔ∏è Cleaning: {out_source_dir}/*_font.c*")
[p.unlink() for p in out_source_dir.glob("*_u8g2.tmp")]
[p.unlink() for p in out_source_dir.glob("*_u8g2.c")]

header_path = out_source_dir / "everyday_u8g2_fonts.h"
include_prefix = f'#include "{header_path.name}"\n\n'

names = []
for bdf_path in bdf_paths:
    name = re.sub(r"-\d+$|\W+", "_", bdf_path.stem.lower()).strip("_")
    names.append(name)

    out_path = out_source_dir / f"{name}_u8g2.c"
    tmp = out_path.with_suffix(".tmp")
    logging.info(f"\nüî† Creating: {out_path}")
    symbol = f"{name}_u8g2_font"
    subproc.run(bdfconv, "-b0", "-f1", f"-n{symbol}", f"-o{tmp}", bdf_path)
    out_path.write_text(include_prefix + tmp.read_text())
    tmp.unlink()

    # TODO: make 7-bit-ASCII reduced version? other reduced versions?

#
# write header file and all-fonts directory
#

logging.info(f"\nüá≠ Writing: {header_path}")
guard_define = "INCLUDED_" + re.sub(r"\W+", "_", header_path.name.upper())
header_path.write_text(textwrap.dedent(f"""
    /* Generated by {Path(__file__).name} */

    #ifndef {guard_define}
    #define {guard_define}

    #include <stdint.h>
    #include "u8g2.h"

    #ifdef __cplusplus
    extern "C" {{
    #endif

    {"\n    ".join(f"extern const uint8_t {n}_u8g2_font[];" for n in names)}

    #ifdef __cplusplus
    }}  /* extern "C" */
    #endif

    struct everyday_entry {{ const char *name; const uint8_t *font; }};
    extern const struct everyday_entry all_everyday_fonts[];

    #endif  /* {guard_define} */
""").lstrip("\n"))

all_fonts_path = out_source_dir / "all_everyday_u8g2_fonts.c"
logging.info(f"üåê Writing: {all_fonts_path}")
all_fonts_path.write_text(textwrap.dedent(f"""
    /* Generated by {Path(__file__).name} */

    #include "{header_path.name}"

    const struct everyday_entry all_everyday_fonts[{len(names) + 1}] = {{
      {"\n      ".join(f"{{ {json.dumps(n)}, {n}_u8g2_font }}," for n in names)}
      {{ NULL, NULL }}
    }};
""").lstrip("\n"))

logging.info(f"üèÅ Done updating {len(names)} u8g2 font files")
