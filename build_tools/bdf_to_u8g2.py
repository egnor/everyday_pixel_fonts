#!/usr/bin/env python3
"""Builds 'bdfconv' from u8g2 source tree and converts .bdf files
(X11 bitmap format) to u8g2-format source files."""

import argparse
import json
import logging
import ok_logging_setup
import ok_subprocess_defaults
import re
import textwrap
from pathlib import Path

ok_logging_setup.install()

top_dir = Path(__file__).parent.parent
try: top_dir = top_dir.relative_to(Path.cwd())
except ValueError: pass

parser = argparse.ArgumentParser()
parser.add_argument("--u8g2_repo", type=Path, default=top_dir / ".." / "u8g2")
args = parser.parse_args()
subproc = ok_subprocess_defaults.SubprocessDefaults()

#
# build bdfconv
#

bdfconv_dir = args.u8g2_repo / "tools" / "font" / "bdfconv"
bdfconv_srcs = list(sorted(bdfconv_dir.glob("*.c")))
if not bdfconv_srcs: ok_logging_setup.exit(f"No *.c: {bdfconv_dir}")
print(bdfconv_srcs)

build_dir = top_dir / "build.tmp"
build_dir.mkdir(exist_ok=True)

bdfconv = build_dir / "bdfconv"
logging.info(f"\nüèóÔ∏è Building: {bdfconv}")
subproc.run("gcc", "-O4", f"-I{bdfconv_dir}", *bdfconv_srcs, "-o", bdfconv)

#
# convert fonts
#

bdf_dir = top_dir / "derived_bdfs"
bdf_paths = list(sorted(bdf_dir.glob("*.bdf")))
if not bdf_paths: ok_logging_setup.exit(f"No *.bdf: {bdf_dir}")

src_dir = top_dir / "src"
logging.info(f"üóëÔ∏è Cleaning: {src_dir}/*_font.c")
[p.unlink() for p in src_dir.glob("*_font.c")]

symbols = []
for bdf_path in bdf_paths:
    logging.info(f"\nüî† Converting: {bdf_path}")
    font_name = re.sub(r"-\d+$|\W+", "_", bdf_path.stem.lower()).strip("_")
    c_path = src_dir / f"{font_name}_font.c"
    symbols.append(symbol := f"{font_name}_font")
    subproc.run(bdfconv, "-b0", "-f1", f"-n{symbol}", f"-o{c_path}", bdf_path)

#
# write header file and all-fonts directory
#

header_path = src_dir / "u8g2_vexed_everyday_fonts.h"
logging.info(f"\nüá≠ Writing: {header_path}")
guard_define = "INCLUDED_" + re.sub(r"\W+", "_", header_path.name.upper())
with open(header_path, "w") as header_file:
    header_file.write(textwrap.dedent(f"""
      /* Generated by {Path(__file__).name} */

      #ifndef {guard_define}
      #define {guard_define}

      #include <stdint.h>

      #ifdef __cplusplus
      extern "C" {{
      #endif

      {"\n      ".join(f"extern uint8_t {s}[];" for s in symbols)}

      #ifdef __cplusplus
      }}  /* extern "C" */
      #endif

      struct everyday_entry {{ const char *name; const uint8_t *font; }}
      extern const struct everyday_entry all_everyday_fonts[];

      #endif  /* {guard_define} */
    """).lstrip("\n"))

all_fonts_path = src_dir / "all_everyday_fonts.c"
logging.info(f"üåê Writing: {all_fonts_path}")
with open(all_fonts_path, "w") as all_fonts_file:
    all_fonts_file.write(textwrap.dedent(f"""
      /* Generated by {Path(__file__).name} */

      #include "u8g2_vexed_everyday_fonts.h"

      const struct everyday_entry all_everyday_fonts[{len(symbols) + 1}] = {{
        {"\n        ".join(f"{{ {json.dumps(s)}, {s} }}," for s in symbols)}
        {{ NULL, NULL }}
      }};
    """).lstrip("\n"))

logging.info(f"üèÅ Done updating {len(bdf_paths)} u8g2 font files")
